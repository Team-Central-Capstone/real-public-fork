// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Real.Data.Contexts;

namespace Real.Data.Migrations
{
    [DbContext(typeof(CapstoneContext))]
    [Migration("20220119004253_UserImages")]
    partial class UserImages
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("Real.Model.Analytic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Data")
                        .HasColumnType("longtext");

                    b.Property<string>("IPAddress")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Analytics");
                });

            modelBuilder.Entity("Real.Model.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("FirebaseUserId")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FirebaseUserId", "Timestamp", "Latitude", "Longitude")
                        .HasDatabaseName("IX_Locations");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Real.Model.SurveyAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AnswerText")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("SurveyQuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SurveyQuestionId");

                    b.ToTable("SurveyAnswers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnswerText = "Arthur, king of the Britons",
                            SurveyQuestionId = 1
                        },
                        new
                        {
                            Id = 2,
                            AnswerText = "Al Gore, founder of the Internet",
                            SurveyQuestionId = 1
                        },
                        new
                        {
                            Id = 3,
                            AnswerText = "Bob, inventor of human suffering",
                            SurveyQuestionId = 1
                        },
                        new
                        {
                            Id = 4,
                            AnswerText = "I want tacos",
                            SurveyQuestionId = 2
                        },
                        new
                        {
                            Id = 5,
                            AnswerText = "I seek the grail",
                            SurveyQuestionId = 2
                        });
                });

            modelBuilder.Entity("Real.Model.SurveyQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SurveyQuestions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QuestionText = "What is your name?",
                            QuestionType = 2
                        },
                        new
                        {
                            Id = 2,
                            QuestionText = "What is your quest?",
                            QuestionType = 2
                        });
                });

            modelBuilder.Entity("Real.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirebaseUserId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("LastLoginTimestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PreferredName")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime?>("ProfileLastUpdatedTimestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("RegisteredTimestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserGenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserGenderId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Real.Model.UserGender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("UserGenders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Male"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Female"
                        });
                });

            modelBuilder.Entity("Real.Model.UserImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FileName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("longblob");

                    b.Property<bool>("IsProfilePhoto")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserImages");
                });

            modelBuilder.Entity("Real.Model.UserSurveyResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("SurveyAnswerResponse")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("SurveyQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SurveyQuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSurveyResponses");
                });

            modelBuilder.Entity("SurveyAnswerUserSurveyResponse", b =>
                {
                    b.Property<int>("SurveyAnswersId")
                        .HasColumnType("int");

                    b.Property<int>("UserSurveyResponsesId")
                        .HasColumnType("int");

                    b.HasKey("SurveyAnswersId", "UserSurveyResponsesId");

                    b.HasIndex("UserSurveyResponsesId");

                    b.ToTable("SurveyAnswerUserSurveyResponse");
                });

            modelBuilder.Entity("Real.Model.SurveyAnswer", b =>
                {
                    b.HasOne("Real.Model.SurveyQuestion", "SurveyQuestion")
                        .WithMany("Answers")
                        .HasForeignKey("SurveyQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyQuestion");
                });

            modelBuilder.Entity("Real.Model.User", b =>
                {
                    b.HasOne("Real.Model.UserGender", "UserGender")
                        .WithMany()
                        .HasForeignKey("UserGenderId");

                    b.Navigation("UserGender");
                });

            modelBuilder.Entity("Real.Model.UserImage", b =>
                {
                    b.HasOne("Real.Model.User", "User")
                        .WithMany("UserImages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Real.Model.UserSurveyResponse", b =>
                {
                    b.HasOne("Real.Model.SurveyQuestion", "SurveyQuestion")
                        .WithMany()
                        .HasForeignKey("SurveyQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Real.Model.User", "User")
                        .WithMany("UserSurveyResponses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyQuestion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SurveyAnswerUserSurveyResponse", b =>
                {
                    b.HasOne("Real.Model.SurveyAnswer", null)
                        .WithMany()
                        .HasForeignKey("SurveyAnswersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Real.Model.UserSurveyResponse", null)
                        .WithMany()
                        .HasForeignKey("UserSurveyResponsesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Real.Model.SurveyQuestion", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Real.Model.User", b =>
                {
                    b.Navigation("UserImages");

                    b.Navigation("UserSurveyResponses");
                });
#pragma warning restore 612, 618
        }
    }
}
