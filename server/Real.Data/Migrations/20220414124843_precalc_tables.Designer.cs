// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Real.Data.Contexts;

namespace Real.Data.Migrations
{
    [DbContext(typeof(CapstoneContext))]
    [Migration("20220414124843_precalc_tables")]
    partial class precalc_tables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.11");

            modelBuilder.Entity("Real.Model.Analytic", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<string>("Action")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<Guid?>("AnalyticDetailId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("AnalyticErrorId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Area")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Controller")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("EndTimestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirebaseUserId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("Host")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("IPv4")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("IPv6")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Namespace")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Path")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("QueryString")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("StartTimestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("UserName")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Analytics");
                });

            modelBuilder.Entity("Real.Model.AnalyticDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AnalyticId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AnalyticDetails");
                });

            modelBuilder.Entity("Real.Model.AnalyticError", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("AnalyticId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<string>("RequestId")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("StackTrace")
                        .HasColumnType("longtext");

                    b.Property<string>("TraceId")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TraceIdentifier")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(200)");

                    b.HasKey("Id");

                    b.ToTable("AnalyticErrors");
                });

            modelBuilder.Entity("Real.Model.AppSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("AppSettingType")
                        .HasColumnType("int");

                    b.Property<string>("Setting")
                        .HasColumnType("longtext");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("AppSettings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppSettingType = 1,
                            Setting = "GPSRoundDecimalPlaces",
                            Value = "4"
                        });
                });

            modelBuilder.Entity("Real.Model.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Body")
                        .HasColumnType("longtext");

                    b.Property<string>("From")
                        .HasMaxLength(254)
                        .HasColumnType("varchar(254)");

                    b.Property<string>("Subject")
                        .HasMaxLength(998)
                        .HasColumnType("varchar(998)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("To")
                        .HasMaxLength(254)
                        .HasColumnType("varchar(254)");

                    b.HasKey("Id");

                    b.ToTable("Emails");
                });

            modelBuilder.Entity("Real.Model.InformationSchema.Column", b =>
                {
                    b.Property<long?>("CHARACTER_MAXIMUM_LENGTH")
                        .HasColumnType("bigint");

                    b.Property<long?>("CHARACTER_OCTET_LENGTH")
                        .HasColumnType("bigint");

                    b.Property<string>("CHARACTER_SET_NAME")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("COLLATION_NAME")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("COLUMN_COMMENT")
                        .HasMaxLength(65535)
                        .HasColumnType("longtext");

                    b.Property<string>("COLUMN_DEFAULT")
                        .HasMaxLength(65535)
                        .HasColumnType("longtext");

                    b.Property<string>("COLUMN_KEY")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("COLUMN_NAME")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("COLUMN_TYPE")
                        .HasMaxLength(16777215)
                        .HasColumnType("longtext");

                    b.Property<string>("DATA_TYPE")
                        .HasColumnType("longtext");

                    b.Property<int?>("DATETIME_PRECISION")
                        .HasColumnType("int");

                    b.Property<string>("EXTRA")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("GENERATION_EXPRESSION")
                        .HasColumnType("longtext");

                    b.Property<string>("IS_NULLABLE")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<long?>("NUMERIC_PRECISION")
                        .HasColumnType("bigint");

                    b.Property<long?>("NUMERIC_SCALE")
                        .HasColumnType("bigint");

                    b.Property<int>("ORDINAL_POSITION")
                        .HasColumnType("int");

                    b.Property<string>("PRIVILEGES")
                        .HasMaxLength(154)
                        .HasColumnType("varchar(154)");

                    b.Property<int?>("SRS_ID")
                        .HasColumnType("int");

                    b.Property<string>("TABLE_CATALOG")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("TABLE_NAME")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("TABLE_SCHEMA")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.ToTable("Capstone_Information_Schema_Columns");
                });

            modelBuilder.Entity("Real.Model.InformationSchema.Table", b =>
                {
                    b.Property<long?>("AUTO_INCREMENT")
                        .HasColumnType("bigint");

                    b.Property<long?>("AVG_ROW_LENGTH")
                        .HasColumnType("bigint");

                    b.Property<long?>("CHECKSUM")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CHECK_TIME")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CREATE_OPTIONS")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CREATE_TIME")
                        .HasColumnType("datetime(6)");

                    b.Property<long?>("DATA_FREE")
                        .HasColumnType("bigint");

                    b.Property<long?>("DATA_LENGTH")
                        .HasColumnType("bigint");

                    b.Property<string>("ENGINE")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<long?>("INDEX_LENGTH")
                        .HasColumnType("bigint");

                    b.Property<long?>("MAX_DATA_LENGTH")
                        .HasColumnType("bigint");

                    b.Property<string>("ROW_FORMAT")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("TABLE_CATALOG")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("TABLE_COLLATION")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("TABLE_COMMENT")
                        .HasMaxLength(65535)
                        .HasColumnType("longtext");

                    b.Property<string>("TABLE_NAME")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<long?>("TABLE_ROWS")
                        .HasColumnType("bigint");

                    b.Property<string>("TABLE_SCHEMA")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("TABLE_TYPE")
                        .HasMaxLength(11)
                        .HasColumnType("varchar(11)");

                    b.Property<DateTime?>("UPDATE_TIME")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("VERSION")
                        .HasColumnType("int");

                    b.ToTable("Capstone_Information_Schema_Tables");
                });

            modelBuilder.Entity("Real.Model.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DeviceID")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("FirebaseUserId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<double>("RollingAverageSpeed")
                        .HasColumnType("double");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.Property<double>("SpeedFromLast")
                        .HasColumnType("double");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("FirebaseUserId")
                        .HasDatabaseName("IX_Locations_FirebaseUserId");

                    b.HasIndex("FirebaseUserId", "Timestamp", "Latitude", "Longitude")
                        .HasDatabaseName("IX_Locations");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Real.Model.Precalc_Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("FirebaseUserId")
                        .HasColumnType("longtext");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("trace")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Precalc_Locations");
                });

            modelBuilder.Entity("Real.Model.Precalc_ProfileMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("MatchedQuestions")
                        .HasColumnType("int");

                    b.Property<double>("RawMatchPercentage")
                        .HasColumnType("double");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<long>("TotalPossibleQuestions")
                        .HasColumnType("bigint");

                    b.Property<double>("WeightedMatchPercentage")
                        .HasColumnType("double");

                    b.Property<int>("lUserId")
                        .HasColumnType("int");

                    b.Property<int>("rUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Precalc_ProfileMatches");
                });

            modelBuilder.Entity("Real.Model.SurveyAnswer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AnswerText")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("SurveyQuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SurveyQuestionId");

                    b.ToTable("SurveyAnswers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnswerText = "Arthur, king of the Britons",
                            SurveyQuestionId = 1
                        },
                        new
                        {
                            Id = 2,
                            AnswerText = "Al Gore, founder of the Internet",
                            SurveyQuestionId = 1
                        },
                        new
                        {
                            Id = 3,
                            AnswerText = "Bob, inventor of human suffering",
                            SurveyQuestionId = 1
                        },
                        new
                        {
                            Id = 4,
                            AnswerText = "I want tacos",
                            SurveyQuestionId = 2
                        },
                        new
                        {
                            Id = 5,
                            AnswerText = "I seek the grail",
                            SurveyQuestionId = 2
                        });
                });

            modelBuilder.Entity("Real.Model.SurveyQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SurveyQuestions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Order = 0,
                            QuestionText = "What is your name?",
                            QuestionType = 2
                        },
                        new
                        {
                            Id = 2,
                            Order = 0,
                            QuestionText = "What is your quest?",
                            QuestionType = 2
                        });
                });

            modelBuilder.Entity("Real.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<bool>("Active")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("Birthdate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(320)
                        .HasColumnType("varchar(320)");

                    b.Property<string>("FirebaseUserId")
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("HeightInches")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastLoginTimestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PreferredName")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("ProfileIntro")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)");

                    b.Property<DateTime?>("ProfileLastUpdatedTimestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("RegisteredTimestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("UserBodyTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("UserGenderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FirebaseUserId")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_FirebaseUserId");

                    b.HasIndex("UserBodyTypeId");

                    b.HasIndex("UserGenderId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Real.Model.UserBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("BlockedOnDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("BlockedUserId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlockedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBlocks");
                });

            modelBuilder.Entity("Real.Model.UserBodyType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("UserBodyTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Prefer not to say"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Skinny"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Average"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Muscular"
                        },
                        new
                        {
                            Id = 5,
                            Name = "More to love"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Dadbod"
                        });
                });

            modelBuilder.Entity("Real.Model.UserGender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.ToTable("UserGenders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Male"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Female"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("Real.Model.UserImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FileName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("longblob");

                    b.Property<bool>("IsProfilePhoto")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserImages");
                });

            modelBuilder.Entity("Real.Model.UserMatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("MatchedLatitude")
                        .HasColumnType("double");

                    b.Property<double>("MatchedLongitude")
                        .HasColumnType("double");

                    b.Property<DateTime>("MatchedOnDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("User1AcceptedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("User2AcceptedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId1")
                        .HasColumnType("int");

                    b.Property<int>("UserId2")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId1");

                    b.HasIndex("UserId2");

                    b.ToTable("UserMatches");
                });

            modelBuilder.Entity("Real.Model.UserMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<bool>("MessageRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("UserId1")
                        .HasColumnType("int");

                    b.Property<int>("UserId2")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId1");

                    b.HasIndex("UserId2");

                    b.ToTable("UserMessages");
                });

            modelBuilder.Entity("Real.Model.UserSurveyResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("SurveyAnswerResponse")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("SurveyQuestionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserSurveyResponseWeight")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SurveyQuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSurveyResponses");
                });

            modelBuilder.Entity("SurveyAnswerUserSurveyResponse", b =>
                {
                    b.Property<int>("SurveyAnswersId")
                        .HasColumnType("int");

                    b.Property<int>("UserSurveyResponsesId")
                        .HasColumnType("int");

                    b.HasKey("SurveyAnswersId", "UserSurveyResponsesId");

                    b.HasIndex("UserSurveyResponsesId");

                    b.ToTable("SurveyAnswerUserSurveyResponse");
                });

            modelBuilder.Entity("UserUserGender", b =>
                {
                    b.Property<int>("GendersAttractedToId")
                        .HasColumnType("int");

                    b.Property<int>("UserAttractedToId")
                        .HasColumnType("int");

                    b.HasKey("GendersAttractedToId", "UserAttractedToId");

                    b.HasIndex("UserAttractedToId");

                    b.ToTable("UserAttractedGenders");
                });

            modelBuilder.Entity("Real.Model.AnalyticDetail", b =>
                {
                    b.HasOne("Real.Model.Analytic", "Analytic")
                        .WithOne("AnalyticDetail")
                        .HasForeignKey("Real.Model.AnalyticDetail", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analytic");
                });

            modelBuilder.Entity("Real.Model.AnalyticError", b =>
                {
                    b.HasOne("Real.Model.Analytic", "Analytic")
                        .WithOne("AnalyticError")
                        .HasForeignKey("Real.Model.AnalyticError", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Analytic");
                });

            modelBuilder.Entity("Real.Model.SurveyAnswer", b =>
                {
                    b.HasOne("Real.Model.SurveyQuestion", null)
                        .WithMany("Answers")
                        .HasForeignKey("SurveyQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Real.Model.User", b =>
                {
                    b.HasOne("Real.Model.UserBodyType", "UserBodyType")
                        .WithMany()
                        .HasForeignKey("UserBodyTypeId");

                    b.HasOne("Real.Model.UserGender", "UserGender")
                        .WithMany("UserGenders")
                        .HasForeignKey("UserGenderId");

                    b.Navigation("UserBodyType");

                    b.Navigation("UserGender");
                });

            modelBuilder.Entity("Real.Model.UserBlock", b =>
                {
                    b.HasOne("Real.Model.User", "BlockedUser")
                        .WithMany()
                        .HasForeignKey("BlockedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Real.Model.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlockedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Real.Model.UserImage", b =>
                {
                    b.HasOne("Real.Model.User", "User")
                        .WithMany("UserImages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Real.Model.UserMatch", b =>
                {
                    b.HasOne("Real.Model.User", "User1")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Real.Model.User", "User2")
                        .WithMany()
                        .HasForeignKey("UserId2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("Real.Model.UserMessage", b =>
                {
                    b.HasOne("Real.Model.User", "User1")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Real.Model.User", "User2")
                        .WithMany()
                        .HasForeignKey("UserId2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User1");

                    b.Navigation("User2");
                });

            modelBuilder.Entity("Real.Model.UserSurveyResponse", b =>
                {
                    b.HasOne("Real.Model.SurveyQuestion", "SurveyQuestion")
                        .WithMany()
                        .HasForeignKey("SurveyQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Real.Model.User", "User")
                        .WithMany("UserSurveyResponses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SurveyQuestion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SurveyAnswerUserSurveyResponse", b =>
                {
                    b.HasOne("Real.Model.SurveyAnswer", null)
                        .WithMany()
                        .HasForeignKey("SurveyAnswersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Real.Model.UserSurveyResponse", null)
                        .WithMany()
                        .HasForeignKey("UserSurveyResponsesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserUserGender", b =>
                {
                    b.HasOne("Real.Model.UserGender", null)
                        .WithMany()
                        .HasForeignKey("GendersAttractedToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Real.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserAttractedToId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Real.Model.Analytic", b =>
                {
                    b.Navigation("AnalyticDetail");

                    b.Navigation("AnalyticError");
                });

            modelBuilder.Entity("Real.Model.SurveyQuestion", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Real.Model.User", b =>
                {
                    b.Navigation("UserImages");

                    b.Navigation("UserSurveyResponses");
                });

            modelBuilder.Entity("Real.Model.UserGender", b =>
                {
                    b.Navigation("UserGenders");
                });
#pragma warning restore 612, 618
        }
    }
}
