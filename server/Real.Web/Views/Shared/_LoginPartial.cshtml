@using Microsoft.AspNetCore.Identity

@* @inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager *@

@* @inject SignInManager<Real.Model.User> SignInManager
@inject UserManager<Real.Model.User> UserManager

@{
    var name = String.Empty;
    var userName = UserManager.GetUserName(User);
    if (userName != null) {
        var user = await UserManager.FindByNameAsync(userName);
        name = user.Name.Split(" ").FirstOrDefault();
    }
}

<ul class="navbar-nav">
@if (SignInManager.IsSignedIn(User))
{
    <li class="nav-item">
        <a id="manage" class="nav-link text-dark" asp-area="Identity" asp-page="/Account/Manage/Index" title="Manage">@name's Profile</a>
    </li>
    <li class="nav-item">
        <form id="logoutForm" class="form-inline" asp-area="Identity" asp-page="/Account/Logout" asp-route-returnUrl="@Url.Action("Index", "Home", new { area = "" })">
            <button id="logout" type="submit" class="nav-link btn btn-link text-dark">Logout</button>
        </form>
    </li>
}
else
{
    <li class="nav-item">
        <a class="nav-link text-dark" id="login" asp-area="Identity" asp-page="/Account/Login">Login</a>
    </li>
}
</ul> *@

<ul class="navbar-nav">
@if (User.Identity.IsAuthenticated) {
    <li class="nav-item">
        <a class="nav-link" asp-area="" asp-controller="Account" asp-action="profile">Profile</a>
    </li>
    <li class="nav-item">
        <a class="nav-link" asp-area="" asp-controller="account" asp-action="signout-google">Logout</a>
    </li>
} else {
    <li class="nav-item">
        <a class="nav-link" asp-area="" asp-controller="account" asp-action="signin-google">Login</a>
    </li>
}
</ul>